@charset "UTF-8";
/*!
 * Eased Layout CSS Library v1.0.0
 * Copyright (c) 2024 Muhammad Sultan Al Mahfuz
 * Licensed under the MIT License
 *
 * Full documentation and usage instructions are available in the `README.md` file. (https://github.com/mahfuz225bd/eased-layout?tab=readme-ov-file#documentation)
*/

/* Basic reset for elements */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

ul {
  padding-left: 25px;
}

header,
footer {
  width: 100%;
}

/* Flexbox-based layout */
div.container,
main {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  -moz-flex-wrap: wrap;
  flex-wrap: wrap;
}

/* Main content and container's direct child elements take equal space by default */
main,
main>section,
main>article,
div.container>section,
div.container>article {
  -webkit-box-flex: 1;
  -ms-flex: 1;
  -webkit-flex: 1;
  -moz-flex: 1;
  flex: 1;
}

/* Sidebars (asides) have a default width of 20% */
main>aside,
div.container>aside {
  -webkit-flex: 0 0 20%;
  -moz-flex: 0 0 20%;
  -ms-flex: 0 0 20%;
  flex: 0 0 20%;
}

/* Single aside takes up 25% width */
main>aside:only-of-type,
div.container>aside:only-of-type {
  -webkit-flex: 0 0 25%;
  -moz-flex: 0 0 25%;
  -ms-flex: 0 0 25%;
  flex: 0 0 25%;
}

/* Responsive design for smaller screens */
@media screen and (max-width: 900px) {

  div.container,
  main {
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
    -ms-flex-direction: column;
    -webkit-flex-direction: column;
    flex-direction: column;
  }

  header,
  aside,
  main,
  section,
  article,
  footer,
  div.container {
    width: 100%;
    padding: 0;
  }
}

/* Fallback for browsers not supporting flexbox */
@supports not (display: flex) {

  header,
  aside,
  main,
  section,
  article,
  footer,
  div.container {
    display: block;
    width: 100%;
  }
}

/* Grid System */
.row {
  overflow: hidden;
}

/* Default: single column (full width) */
.row>* {
  float: left;
  width: 100%;
}

/* Fixed row columned (For 12 columned (maximum) grid system) */
/* 1 column (Optional) */
.row.total-columns-1>* {
  width: 100%;
}

/* 2 columns */
.row.total-columns-2>* {
  width: 50%;
}

/* 3 columns */
.row.total-columns-3>* {
  width: 33.33%;
}

/* 4 columns */
.row.total-columns-4>* {
  width: 25%;
}

/* 5 columns */
.row.total-columns-5>* {
  width: 20%;
}

/* 6 columns */
.row.total-columns-6>* {
  width: 16.67%;
}

/* 7 columns */
.row.total-columns-7>* {
  width: 14.29%;
}

/* 8 columns */
.row.total-columns-8>* {
  width: 12.5%;
}

/* 9 columns */
.row.total-columns-9>* {
  width: 11.11%;
}

/* 10 columns */
.row.total-columns-10>* {
  width: 10%;
}

/* 11 columns */
.row.total-columns-11>* {
  width: 9.09%;
}

/* 12 columns */
.row.total-columns-12>* {
  width: 8.33%;
}

/* It would be helpful to make 12+ columned grid */
.row.total-columns-n>* {
  width: calc(100% / var(--columns));
}

/* Clearfix for floated children */
.clearfix::after {
  content: "";
  clear: both;
  display: table;
}

/* Layout Rules (HTML5 Semantic Layout):
    Header Placement:
        Optional; can be placed in the body, inside a div.container, or as a child of aside, main, article, or section.
        Though optional, having at least one header element is highly recommended as it improves SEO by providing search engines with context, and enhances accessibility too.

    Aside Combinations:
        None, one (left), one (right), or two asides.

    Main Content:
        Must use main. Can section, or article be used as optional.

    Footer Placement:
        Optional; can be placed in the body or inside a div.container.

    container Usage:
        The div.container serves as a container. It is optional and can be placed as a child of any element.
*/

/* Layout Rules (Grid Layout):
   - The grid system uses `.row` for organizing content in columns. 
   - Fixed Grid (12 columns max): Use `.total-columns-1` to `.total-columns-12` to define column widths (e.g., `.total-columns-2` = 50%).
   - Dynamic Grid: Use `.total-columns-n` with `--columns` to calculate column widths automatically (`width: calc(100% / var(--columns))`).
   - Flexible Layout: Columns can be fixed or dynamic depending on the class applied to the row.
   - `.clearfix` ensures floated children are cleared.
*/